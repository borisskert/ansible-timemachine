---
- name: Verify
  hosts: all
  become: true

  tasks:
    - name: Should create Dockerfile
      slurp:
        src: /opt/timemachine/docker/Dockerfile
      register: docker_file
      failed_when:
        not docker_file.content == ( expected_content | b64encode )
      vars:
        expected_content: |
          FROM alpine:3.11

          MAINTAINER "Boris Skert <boris.skert@gmail.com>"

          RUN apk --no-cache --no-progress upgrade && \
              apk --no-cache --no-progress add \
                  bash \
                  tini \
                  netatalk~=3.1

          COPY ./entrypoint.sh /entrypoint.sh
          COPY ./add-user.sh /add-user.sh
          COPY ./update-user-password.sh /update-user-password.sh

          VOLUME /media/time_machine
          VOLUME /etc
          VOLUME /var/netatalk
          VOLUME /var/lock

          EXPOSE 548

          ENTRYPOINT ["/sbin/tini", "--", "/entrypoint.sh"]

    - name: Should create docker entrypoint
      slurp:
        src: /opt/timemachine/docker/entrypoint.sh
      register: docker_entrypoint_file
      failed_when:
        not docker_entrypoint_file.content == ( expected_content | b64encode )
      vars:
        expected_content: |
          #!/bin/bash

          touch /var/lock/netatalk

          # to prevent cnid_metad[11] {cnid_metad.c:321} (error:CNID): set_dbdir: mkdir failed for /var/netatalk/CNID//*/ error
          mkdir -p /var/netatalk/CNID

          /usr/sbin/netatalk -d

    - name: Should create add-user script
      slurp:
        src: /opt/timemachine/docker/add-user.sh
      register: add_user_script_file
      failed_when:
        not add_user_script_file.content == ( expected_content | b64encode )
      vars:
        expected_content: |
          #!/bin/bash
          set -e

          # add-user.sh user_id username password home

          user_id=$1
          user=$2
          password=$3
          home=$4
          gid=$user_id
          group=$user

          is_group_existing() {
            if cat </etc/group | grep "^$group:" 1>/dev/null; then
              true
            else
              false
            fi
          }

          is_user_existing() {
            if cat </etc/passwd | grep "^$user:" 1>/dev/null; then
              true
            else
              false
            fi
          }

          create_group() {
            addgroup -g "$gid" "$group"
          }

          create_user() {
            adduser -u "$user_id" -S -H -h "$home" -G "$group" "$user"
            echo "$user:$password" | chpasswd
          }

          if ! is_group_existing; then
            create_group
            echo "Group $group created"
          fi

          if ! is_user_existing; then
            create_user
            echo "User $user created"
          fi

    - name: Should create add-user script
      slurp:
        src: /opt/timemachine/docker/update-user-password.sh
      register: update_user_password_script_file
      failed_when:
        not update_user_password_script_file.content == ( expected_content | b64encode )
      vars:
        expected_content: |
          #!/bin/bash
          set -e

          # update-user-password.sh username password

          user=$1
          password=$2

          is_user_existing() {
            if cat </etc/passwd | grep "^$user:" 1>/dev/null; then
              true
            else
              false
            fi
          }

          update_user_password() {
            echo "$user:$password" | chpasswd
          }

          if is_user_existing; then
            update_user_password
            echo "Password for $user updated"
          fi

    - name: Should create systemd unit file
      slurp:
        src: /etc/systemd/system/timemachine.service
      register: systemd_service_file
      failed_when:
        not systemd_service_file.content == ( expected_content | b64encode )
      vars:
        expected_content: |
          [Install]
          WantedBy=multi-user.target

          [Unit]
          Description=timemachine service
          After=docker.service
          Requires=docker.service

          [Service]
          ExecStartPre=-/usr/bin/docker rm -f timemachine.service
          ExecStartPre=/usr/bin/docker build --tag local/timemachine:3.1 /opt/timemachine/docker

          ExecStart=/usr/bin/docker run --name timemachine.service \
              --volume /srv/my_timemachine/storage:/media/time_machine \
              --volume /srv/my_timemachine/config/etc:/etc \
              --tmpfs /tmp \
              --tmpfs /var/netatalk \
              --tmpfs /var/lock \
              --publish 127.0.0.1:10548:548/tcp \
              local/timemachine:3.1

          ExecStop=-/usr/bin/docker stop timemachine.service
          ExecStopPost=-/usr/bin/docker rm -f timemachine.service

          Restart=always
          RestartSec=60s
          TimeoutSec=3600

    - name: Should create afp.conf file
      slurp:
        src: /srv/my_timemachine/config/etc/afp.conf
      register: afp_conf_file
      failed_when:
        not afp_conf_file.content == ( expected_content | b64encode )
      vars:
        expected_content: |
          [Global]
          hostname = my-ansible-timemachine
          mimic model = RackMac
          log file = /dev/stdout
          log level = default:error
          zeroconf = yes
          [Time Machine user1]
          path = /media/time_machine/storage1
          valid users = user1
          time machine = yes
          vol size limit = 256000
          [Time Machine user2]
          path = /media/time_machine/storage2
          valid users = user2
          time machine = yes
          vol size limit = 64000

    - name: Should create AppleVolumes.default file
      slurp:
        src: /srv/my_timemachine/config/etc/netatalk/AppleVolumes.default
      register: applevolumes_file
      vars:
        expected_content: |
          /media/time_machine/storage1 "Time Machine user1" options:tm
          /media/time_machine/storage2 "Time Machine user2" options:tm

    - name: Should create config volume directory
      stat:
        path: /srv/my_timemachine/config
      register: config_volume_directory
      failed_when: not config_volume_directory.stat.exists

    - name: Should create storage volume directory
      stat:
        path: /srv/my_timemachine/storage
      register: storage_volume_directory
      failed_when: not storage_volume_directory.stat.exists

    - name: Should open 10548/tcp port
      command: nc -z -w1 localhost 10548
      changed_when: false
      register: netcat_10548
      retries: 300
      delay: 1
      until: netcat_10548 is defined
        and netcat_10548.rc == 0
      when: not (
        molecule_docker_environment is defined
        and molecule_docker_environment | bool
        )
